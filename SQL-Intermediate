1. Some of the facilities charge a fee to members, but some do not.
Please list the names of the facilities that do?

--> SELECT *
FROM Facilities
WHERE membercost >0

2. How many facilities do not charge a fee to members?
SELECT *
FROM Facilities
WHERE membercost =0

3. How can you produce a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost?
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question

SELECT facid, name, membercost, monthlymaintenance
FROM Facilities
WHERE membercost < ( 0.2 * monthlymaintenance )

4. How can you retrieve the details of facilities with ID 1 and 5?
Write the query without using the OR operator

SELECT * FROM Facilities WHERE facid =1 AND 5

5. How can you produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100? Return the name and monthly maintenance of the facilities
in question.

SELECT *
CASE
WHEN monthlymaintenance <=100
THEN "Cheap"
ELSE "Expensive"
END AS Budgetcheck
FROM Facilities

6. You'd like to get the first and last name of the last member(s)
who signed up. Do not use the LIMIT clause for your solution

SELECT firstname, surname, joindate
FROM Members
ORDER BY joindate (DESC)

7. How can you produce a list of all members who have used a tennis court?
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name

SELECT * FROM Members

UNION 

SELECT * FROM Facilities

WHERE name ILIKE 'tennis court'
      ORDER BY firstname (ASC)
      
8. How can you produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30? Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries.


